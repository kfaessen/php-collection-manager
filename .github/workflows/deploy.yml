name: 🚀 OVH Optimized Multi-Environment Deploy

on:
  push:
    branches:
      - main           # Multi-environment deployment pipeline
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

env:
  PHP_VERSION: '8.4'

jobs:
  # Pre-deployment validation and testing
  validate:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      skip_tests: ${{ steps.determine-env.outputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pdo_mysql, mbstring, openssl, curl, json
          coverage: none

      - name: Validate composer.json
        run: composer validate --strict

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Determine deployment environment
        id: determine-env
        run: |
          case "${{ github.ref_name }}" in
            "main") 
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "skip_tests=false" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "environment=none" >> $GITHUB_OUTPUT
              echo "skip_tests=true" >> $GITHUB_OUTPUT
              ;;
          esac

  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref_name == 'main' && github.event_name != 'pull_request'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy application
        run: |
          echo "🚀 Deploying to development..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            
            # Install/update dependencies
            if command -v composer &> /dev/null; then
              composer install --no-dev --optimize-autoloader --no-interaction
            else
              echo '⚠️  Composer not found, skipping dependency installation'
            fi
            
            # Set correct file permissions for OVH
            find . -type f -name '*.php' -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            
            # Ensure uploads directory exists and is writable
            mkdir -p uploads/covers
            chmod -R 755 uploads/
            
            # Set cache directories if they exist
            if [ -d 'cache' ]; then chmod -R 755 cache/; fi
            if [ -d 'logs' ]; then chmod -R 755 logs/; fi
            
            echo '✅ Application deployed successfully'
          "

      - name: Run database migrations and seeding
        run: |
          echo "🗄️  Running Laravel database migrations and seeding..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Check if Laravel artisan exists and run migrations
            if [ -f 'artisan' ]; then
              echo '🔄 Running Laravel migrations...'
              php artisan migrate --force 2>&1 || {
                echo '❌ Laravel database migration failed'
                exit 1
              }
              echo '✅ Laravel migrations completed'
              
              echo '🌱 Running database seeding...'
              php artisan db:seed --force 2>&1 || {
                echo '❌ Database seeding failed'
                exit 1
              }
              echo '✅ Database seeding completed'
            else
              # Fallback to old migration system
              echo '⚠️  Laravel artisan not found, trying legacy migration system...'
              if [ -f 'run_migrations.php' ]; then
                php run_migrations.php 2>&1 || {
                  echo '❌ Legacy database migration failed'
                  exit 1
                }
                echo '✅ Legacy database migrations completed'
              else
                echo '⚠️  No migration system found, skipping database updates'
              fi
            fi
          "

  deploy-tst:
    name: 🚀 Deploy to Test
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref_name == 'main' && github.event_name != 'pull_request'
    environment:
      name: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy application
        run: |
          echo "🚀 Deploying to test..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            
            # Install/update dependencies
            if command -v composer &> /dev/null; then
              composer install --no-dev --optimize-autoloader --no-interaction
            else
              echo '⚠️  Composer not found, skipping dependency installation'
            fi
            
            # Set correct file permissions for OVH
            find . -type f -name '*.php' -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            
            # Ensure uploads directory exists and is writable
            mkdir -p uploads/covers
            chmod -R 755 uploads/
            
            # Set cache directories if they exist
            if [ -d 'cache' ]; then chmod -R 755 cache/; fi
            if [ -d 'logs' ]; then chmod -R 755 logs/; fi
            
            echo '✅ Application deployed successfully'
          "

      - name: Run database migrations and seeding
        run: |
          echo "🗄️  Running Laravel database migrations and seeding..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Check if Laravel artisan exists and run migrations
            if [ -f 'artisan' ]; then
              echo '🔄 Running Laravel migrations...'
              php artisan migrate --force 2>&1 || {
                echo '❌ Laravel database migration failed'
                exit 1
              }
              echo '✅ Laravel migrations completed'
              
              echo '🌱 Running database seeding...'
              php artisan db:seed --force 2>&1 || {
                echo '❌ Database seeding failed'
                exit 1
              }
              echo '✅ Database seeding completed'
            else
              # Fallback to old migration system
              echo '⚠️  Laravel artisan not found, trying legacy migration system...'
              if [ -f 'run_migrations.php' ]; then
                php run_migrations.php 2>&1 || {
                  echo '❌ Legacy database migration failed'
                  exit 1
                }
                echo '✅ Legacy database migrations completed'
              else
                echo '⚠️  No migration system found, skipping database updates'
              fi
            fi
          "

  deploy-acc:
    name: 🚀 Deploy to Acceptance
    runs-on: ubuntu-latest
    needs: deploy-tst
    if: github.ref_name == 'main' && github.event_name != 'pull_request'
    environment:
      name: acceptance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy application
        run: |
          echo "🚀 Deploying to acceptance..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            
            # Install/update dependencies
            if command -v composer &> /dev/null; then
              composer install --no-dev --optimize-autoloader --no-interaction
            else
              echo '⚠️  Composer not found, skipping dependency installation'
            fi
            
            # Set correct file permissions for OVH
            find . -type f -name '*.php' -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            
            # Ensure uploads directory exists and is writable
            mkdir -p uploads/covers
            chmod -R 755 uploads/
            
            # Set cache directories if they exist
            if [ -d 'cache' ]; then chmod -R 755 cache/; fi
            if [ -d 'logs' ]; then chmod -R 755 logs/; fi
            
            echo '✅ Application deployed successfully'
          "

      - name: Run database migrations and seeding
        run: |
          echo "🗄️  Running Laravel database migrations and seeding..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Check if Laravel artisan exists and run migrations
            if [ -f 'artisan' ]; then
              echo '🔄 Running Laravel migrations...'
              php artisan migrate --force 2>&1 || {
                echo '❌ Laravel database migration failed'
                exit 1
              }
              echo '✅ Laravel migrations completed'
              
              echo '🌱 Running database seeding...'
              php artisan db:seed --force 2>&1 || {
                echo '❌ Database seeding failed'
                exit 1
              }
              echo '✅ Database seeding completed'
            else
              # Fallback to old migration system
              echo '⚠️  Laravel artisan not found, trying legacy migration system...'
              if [ -f 'run_migrations.php' ]; then
                php run_migrations.php 2>&1 || {
                  echo '❌ Legacy database migration failed'
                  exit 1
                }
                echo '✅ Legacy database migrations completed'
              else
                echo '⚠️  No migration system found, skipping database updates'
              fi
            fi
          "

  deploy-prd:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-acc
    if: github.ref_name == 'main' && github.event_name != 'pull_request'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create maintenance mode
        run: |
          echo "🚧 Enabling maintenance mode for production..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            echo '<?php http_response_code(503); echo \"<h1>Onderhoud</h1><p>De site wordt bijgewerkt. Probeer het over een paar minuten opnieuw.</p>\"; exit; ?>' > maintenance.php
            if [ -f .htaccess ]; then cp .htaccess .htaccess.backup; fi
            echo 'RewriteEngine On
            RewriteCond %{REQUEST_URI} !^/maintenance\.php$
            RewriteCond %{REMOTE_ADDR} !^${{ secrets.ADMIN_IP }}$
            RewriteRule ^(.*)$ /maintenance.php [R=503,L]' > .htaccess
          "

      - name: Deploy application
        run: |
          echo "🚀 Deploying to production..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            
            # Install/update dependencies
            if command -v composer &> /dev/null; then
              composer install --no-dev --optimize-autoloader --no-interaction
            else
              echo '⚠️  Composer not found, skipping dependency installation'
            fi
            
            # Set correct file permissions for OVH
            find . -type f -name '*.php' -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            
            # Ensure uploads directory exists and is writable
            mkdir -p uploads/covers
            chmod -R 755 uploads/
            
            # Set cache directories if they exist
            if [ -d 'cache' ]; then chmod -R 755 cache/; fi
            if [ -d 'logs' ]; then chmod -R 755 logs/; fi
            
            echo '✅ Application deployed successfully'
          "

      - name: Run database migrations and seeding
        run: |
          echo "🗄️  Running Laravel database migrations and seeding..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Check if Laravel artisan exists and run migrations
            if [ -f 'artisan' ]; then
              echo '🔄 Running Laravel migrations...'
              php artisan migrate --force 2>&1 || {
                echo '❌ Laravel database migration failed'
                exit 1
              }
              echo '✅ Laravel migrations completed'
              
              echo '🌱 Running database seeding...'
              php artisan db:seed --force 2>&1 || {
                echo '❌ Database seeding failed'
                exit 1
              }
              echo '✅ Database seeding completed'
            else
              # Fallback to old migration system
              echo '⚠️  Laravel artisan not found, trying legacy migration system...'
              if [ -f 'run_migrations.php' ]; then
                php run_migrations.php 2>&1 || {
                  echo '❌ Legacy database migration failed'
                  exit 1
                }
                echo '✅ Legacy database migrations completed'
              else
                echo '⚠️  No migration system found, skipping database updates'
              fi
            fi
          "

      - name: Disable maintenance mode
        run: |
          echo "🔄 Disabling maintenance mode..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            rm -f maintenance.php
            if [ -f .htaccess.backup ]; then 
              mv .htaccess.backup .htaccess
            else
              rm -f .htaccess
            fi
          " 